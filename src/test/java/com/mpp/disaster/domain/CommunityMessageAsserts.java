package com.mpp.disaster.domain;

import static com.mpp.disaster.domain.AssertUtils.zonedDataTimeSameInstant;
import static org.assertj.core.api.Assertions.assertThat;

public class CommunityMessageAsserts {

    /**
     * Asserts that the entity has all properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityMessageAllPropertiesEquals(CommunityMessage expected, CommunityMessage actual) {
        assertCommunityMessageAutoGeneratedPropertiesEquals(expected, actual);
        assertCommunityMessageAllUpdatablePropertiesEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all updatable properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityMessageAllUpdatablePropertiesEquals(CommunityMessage expected, CommunityMessage actual) {
        assertCommunityMessageUpdatableFieldsEquals(expected, actual);
        assertCommunityMessageUpdatableRelationshipsEquals(expected, actual);
    }

    /**
     * Asserts that the entity has all the auto generated properties (fields/relationships) set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityMessageAutoGeneratedPropertiesEquals(CommunityMessage expected, CommunityMessage actual) {
        assertThat(actual)
            .as("Verify CommunityMessage auto generated properties")
            .satisfies(a -> assertThat(a.getId()).as("check id").isEqualTo(expected.getId()));
    }

    /**
     * Asserts that the entity has all the updatable fields set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityMessageUpdatableFieldsEquals(CommunityMessage expected, CommunityMessage actual) {
        assertThat(actual)
            .as("Verify CommunityMessage relevant properties")
            .satisfies(a -> assertThat(a.getContent()).as("check content").isEqualTo(expected.getContent()))
            .satisfies(a -> assertThat(a.getTime_posted()).as("check time_posted").isEqualTo(expected.getTime_posted()))
            .satisfies(a -> assertThat(a.getApproved()).as("check approved").isEqualTo(expected.getApproved()))
            .satisfies(a ->
                assertThat(a.getTimeApproved())
                    .as("check timeApproved")
                    .usingComparator(zonedDataTimeSameInstant)
                    .isEqualTo(expected.getTimeApproved())
            );
    }

    /**
     * Asserts that the entity has all the updatable relationships set.
     *
     * @param expected the expected entity
     * @param actual the actual entity
     */
    public static void assertCommunityMessageUpdatableRelationshipsEquals(CommunityMessage expected, CommunityMessage actual) {
        assertThat(actual)
            .as("Verify CommunityMessage relationships")
            .satisfies(a -> assertThat(a.getParent()).as("check parent").isEqualTo(expected.getParent()));
    }
}
